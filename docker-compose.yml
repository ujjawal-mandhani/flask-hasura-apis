version: '3.8'

services:
  flask-cont:
    build: .
    container_name: flask-cont
    volumes:
      - ./backend-api:/home/app/
    ports:
      - 23002:23002
    environment:
      HASURA_API_KEY: x-hasura-admin-secret
      HASURA_API_VALUE: hasura12345
      SECRET_KEY: 9cef962019e98c0f4ed951b979d615cbaa98e51edd464ca5cc5c99349f5b9e6b
      PYTHONPATH: /home/app
    networks:
      - flask-network
    restart: always
    depends_on:
      - postgres
      - graphql-engine
      - elasticsearch-cont
  
  flask-cont1:
    build: .
    container_name: flask-cont1
    volumes:
      - ./backend-api:/home/app/
    ports:
      - 23006:23002
    environment:
      HASURA_API_KEY: x-hasura-admin-secret
      HASURA_API_VALUE: hasura12345
      SECRET_KEY: 9cef962019e98c0f4ed951b979d615cbaa98e51edd464ca5cc5c99349f5b9e6b
      PYTHONPATH: /home/app
    networks:
      - flask-network
    restart: always
    depends_on:
      - postgres
      - graphql-engine
      - elasticsearch-cont

  postgres:
    build: ./postgres/
    environment:
      POSTGRES_USER: flask
      POSTGRES_PASSWORD: flask
      POSTGRES_DB: flask
    ports:
      - 23001:5432
    volumes:
      - ./postgres/postgres_data:/var/lib/postgresql/data
    networks:
      - flask-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "flask" ]
      interval: 10s
      retries: 5
      start_period: 5s

  graphql-engine:
    image: hasura/graphql-engine
    ports:
      - 23003:8080
    depends_on:
      - postgres
    restart: always
    networks:
      - flask-network
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://flask:flask@postgres:5432/flask
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://flask:flask@postgres:5432/flask
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: hasura12345

  elasticsearch-cont:
    image: elasticsearch:8.12.2
    container_name: elasticsearch-cont
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=elasticsearchpassword # user name is "elastic"
      - xpack.security.enabled=false
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - flask-network
    mem_limit: 2g
    volumes:
      - ./elasticsearch:/usr/share/elasticsearch/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:9200/_cluster/health || exit 1"
        ]
      interval: 40s
      timeout: 10s
      retries: 5

  kibana-cont:
    image: kibana:8.12.2
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch-cont:9200
    mem_limit: 2g
    volumes:
      - ./kibana:/usr/share/kibana/data
    depends_on:
      - elasticsearch-cont
    networks:
      - flask-network
  
  apache-apisix:
    image: apache/apisix
    ports:
      - 9080:9080
      - 9180:9180
      - 9443:9443/tcp
      - 9443:9443/udp
      - 9090:9092 
      - 9100:9100 
      - 9091:9091
    environment:
      - APISIX_DEPLOYMENT_ETCD_HOST=["http://apache-apisix-etcd:2379"]
    volumes:
      - ./apisix/config.yaml:/usr/local/apisix/conf/config.yaml
    mem_limit: 2g
    restart: always
    networks:
      - flask-network
  
  apache-apisix-etcd:
    image: bitnami/etcd:latest
    environment:
      - ETCD_ADVERTISE_CLIENT_URLS=http://apache-apisix-etcd:2379
      - ALLOW_NONE_AUTHENTICATION=yes
    mem_limit: 2g
    networks:
      - flask-network

networks:
  flask-network:
    driver: bridge
